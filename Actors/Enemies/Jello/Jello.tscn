[gd_scene load_steps=23 format=3 uid="uid://bs5omw5j100bn"]

[ext_resource type="Script" path="res://Actors/Enemies/Jello/Jello.gd" id="1"]
[ext_resource type="Texture2D" uid="uid://cha22i0wh1fi1" path="res://Actors/Enemies/Jello/Jello 720p.png" id="2"]
[ext_resource type="PackedScene" uid="uid://yh61bqudxtql" path="res://Actors/Enemies/EnemyHealthBar.tscn" id="2_jm8tx"]
[ext_resource type="Script" path="res://Abstract/StateMachine.gd" id="3"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Air.gd" id="4"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Idle.gd" id="5"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Jump.gd" id="6"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Land.gd" id="7"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Death.gd" id="8"]
[ext_resource type="Script" path="res://Actors/Enemies/Jello/Knockback.gd" id="10_utumg"]

[sub_resource type="CapsuleShape2D" id="10"]
radius = 29.0
height = 106.0

[sub_resource type="RectangleShape2D" id="1"]
size = Vector2(9.37276, 8.07059)

[sub_resource type="RectangleShape2D" id="2"]
size = Vector2(4.5, 8.75)

[sub_resource type="Shader" id="Shader_kwsol"]
code = "shader_type canvas_item;

uniform vec4 flashColor : source_color;
uniform float flashState : hint_range(0.0, 1.0, 0.1);

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : source_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
	COLOR = mix(COLOR, flashColor, flashState);
	COLOR.a *= texture_color.a;
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	vec3 new_light_height;
	vec4 new_light_color;
	if (fake_light_depth) {
		float base_height = LIGHT_VERTEX.z;
		new_light_height = vec3(LIGHT_VERTEX.x, LIGHT_VERTEX.y, base_height - obj_height);
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_light_height.z ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_light_height.z) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_light_height.z) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_light_height.z > light_change_thresh) {
			float n_height_safety = new_light_height.z;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT = LIGHT_COLOR * light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------

	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
//	vec3 light_normal = normalize(vec3(LIGHT, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(new_light_height, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
//		if (min_light != 0.0) { 
//			LIGHT_VERTEX = -NORMAL.xy*length(LIGHT_VERTEX); 
//		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rxyu6"]
shader = SubResource("Shader_kwsol")
shader_parameter/flashColor = Color(1, 1, 1, 1)
shader_parameter/flashState = 0.0
shader_parameter/first_stage = 0.5
shader_parameter/first_smooth = 0.0
shader_parameter/second_stage = 0.0
shader_parameter/second_smooth = 0.0
shader_parameter/rim_light = false
shader_parameter/rim_thickness = 5.0
shader_parameter/rim_intense = 1.0
shader_parameter/rim_extra_thick = false
shader_parameter/min_light = 0.0
shader_parameter/mid_light = 0.0
shader_parameter/max_light = 1.0
shader_parameter/obj_light_add = 0.0
shader_parameter/fake_light_depth = false
shader_parameter/obj_height = 0.0
shader_parameter/min_scale = 0.2
shader_parameter/max_scale = 2.0
shader_parameter/light_change_thresh = 0.0
shader_parameter/light_fade = false
shader_parameter/light_fade_end = 0.0
shader_parameter/fake_spot_light = false
shader_parameter/first_shrink_speed = 0.0
shader_parameter/second_shrink_speed = 0.0
shader_parameter/before_light_modulate = Color(1, 1, 1, 1)

[sub_resource type="Animation" id="4"]
resource_name = "Air"
length = 0.916667
step = 0.0416667
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0416667, 0.0833333, 0.125, 0.166667, 0.208333, 0.25, 0.291667, 0.333333, 0.375, 0.416667, 0.458333, 0.5, 0.541667, 0.583333, 0.625, 0.666667, 0.708333, 0.75, 0.791667, 0.833333, 0.875, 0.916667),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143]
}

[sub_resource type="Animation" id="9"]
resource_name = "Death"
length = 1.125
step = 0.0416667
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0416667, 0.0833333, 0.125, 0.166667, 0.208333, 0.25, 0.291667, 0.333333, 0.375, 0.416667, 0.458333, 0.5, 0.541667, 0.583333, 0.625, 0.666667, 0.708333, 0.75, 0.791667, 0.833333, 0.875, 0.916667, 0.958333, 1, 1.04167, 1.08333, 1.125),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
}

[sub_resource type="Animation" id="5"]
resource_name = "Idle"
length = 2.08333
step = 0.0416667
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0416667, 0.0833333, 0.125, 0.166667, 0.208333, 0.25, 0.291667, 0.333333, 0.375, 0.416667, 0.458333, 0.5, 0.541667, 0.583333, 0.625, 0.666667, 0.708333, 0.75, 0.791667, 0.833333, 0.875, 0.916667, 0.958333, 1, 1.04167, 1.08333, 1.125, 1.16667, 1.20833, 1.25, 1.29167, 1.33333, 1.375, 1.41667, 1.45833, 1.5, 1.54167, 1.58333, 1.625, 1.66667, 1.70833, 1.75, 1.79167, 1.83333, 1.875, 1.91667, 1.95833, 2, 2.04167, 2.08333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]
}

[sub_resource type="Animation" id="6"]
resource_name = "Jump"
length = 0.291667
step = 0.0416667
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0416667, 0.0833333, 0.125, 0.166667, 0.208333, 0.25, 0.291667),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [114, 115, 116, 117, 118, 119, 120, 121]
}

[sub_resource type="Animation" id="7"]
resource_name = "Land"
length = 0.166667
step = 0.0416667
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0416667, 0.0833333, 0.125, 0.166667),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [144, 145, 146, 147, 148]
}

[sub_resource type="Animation" id="8"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [63]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_hdcpw"]
_data = {
"Air": SubResource("4"),
"Death": SubResource("9"),
"Idle": SubResource("5"),
"Jump": SubResource("6"),
"Land": SubResource("7"),
"RESET": SubResource("8")
}

[node name="JelloEnemy" type="CharacterBody2D" groups=["enemy", "jello"]]
position = Vector2(120, 56)
collision_layer = 2
collision_mask = 16
script = ExtResource("1")
health = 2

[node name="EnemyHealthBar" parent="." instance=ExtResource("2_jm8tx")]
offset_left = -15.0
offset_top = -15.0
offset_right = 1739.0
offset_bottom = 467.0
scale = Vector2(0.0170977, 0.0177945)

[node name="PlayerDetector" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerDetector"]
position = Vector2(0, -17)
rotation = 1.5708
shape = SubResource("10")

[node name="CollisionShape2D2" type="CollisionShape2D" parent="."]
position = Vector2(0, 3)
scale = Vector2(1.00336, 1.02959)
shape = SubResource("1")

[node name="BodyHitZone" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="BodyHitZone"]
position = Vector2(0.5, 2.375)
scale = Vector2(1, 0.5)
shape = SubResource("2")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_rxyu6")
position = Vector2(0, 2)
scale = Vector2(0.1, 0.1)
texture = ExtResource("2")
hframes = 13
vframes = 12
frame = 63

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3")
initial_state = NodePath("Idle")

[node name="Air" type="Node" parent="StateMachine"]
script = ExtResource("4")

[node name="Jump" type="Node" parent="StateMachine"]
script = ExtResource("6")

[node name="Land" type="Node" parent="StateMachine"]
script = ExtResource("7")

[node name="Idle" type="Node" parent="StateMachine"]
script = ExtResource("5")

[node name="Death" type="Node" parent="StateMachine"]
script = ExtResource("8")

[node name="Knockback" type="Node" parent="StateMachine"]
script = ExtResource("10_utumg")

[node name="Timer" type="Timer" parent="StateMachine/Knockback"]
wait_time = 0.1
one_shot = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_hdcpw")
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer2D" parent="."]
max_distance = 500.0

[connection signal="body_entered" from="PlayerDetector" to="StateMachine/Idle" method="on_something_detected"]
[connection signal="body_entered" from="BodyHitZone" to="." method="on_hit_something"]
[connection signal="timeout" from="StateMachine/Knockback/Timer" to="StateMachine/Knockback" method="_on_timer_timeout"]
